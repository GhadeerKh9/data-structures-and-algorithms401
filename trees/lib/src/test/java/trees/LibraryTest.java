/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;
import trees.trees.BinarySearchTree;
import trees.trees.BinaryTreeClass;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {


    @Test
    public void emptyTree() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();

        assertEquals("BinaryTreeClass{root=null}", tree.toString());
//
//
//
    }

    @Test
    public void addFirstNode() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);


        assertEquals("BinaryTreeClass{root=BinaryNode{data=30, leftNode=null, rightNode=null}}", tree.toString());
    }

    @Test
    public void addTest() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);
        tree.add(70);
        tree.add(80);

        tree.add(50);

        tree.add(53);

        assertEquals("BinaryTreeClass{root=BinaryNode{data=30, leftNode=null, rightNode=BinaryNode{data=70, leftNode=BinaryNode{data=50, leftNode=null, rightNode=BinaryNode{data=53, leftNode=null, rightNode=null}}, rightNode=BinaryNode{data=80, leftNode=null, rightNode=null}}}}", tree.toString());
    }

    //
//
//
    @Test
    public void containsTest() {

        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);
        tree.add(70);
        tree.add(80);

        tree.add(50);

        tree.add(53);

        assertTrue(tree.contains(30));
        assertFalse(tree.contains(7));
    }

    //
    @Test
    public void inOrderOrderTest() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);
        tree.add(70);
        tree.add(80);

        tree.add(50);

        tree.add(53);
        assertEquals("BinaryTreeClass{root=BinaryNode{data=30, leftNode=null, rightNode=BinaryNode{data=70, leftNode=BinaryNode{data=50, leftNode=null, rightNode=BinaryNode{data=53, leftNode=null, rightNode=null}}, rightNode=BinaryNode{data=80, leftNode=null, rightNode=null}}}}", tree.toString());

    }
//

    @Test
    public void preOrderTest() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);
        tree.add(70);
        tree.add(80);

        tree.add(50);

        tree.add(53);
        assertEquals("BinaryTreeClass{root=BinaryNode{data=30, leftNode=null, rightNode=BinaryNode{data=70, leftNode=BinaryNode{data=50, leftNode=null, rightNode=BinaryNode{data=53, leftNode=null, rightNode=null}}, rightNode=BinaryNode{data=80, leftNode=null, rightNode=null}}}}", tree.toString());

    }

    @Test
    public void postOrderTest() {
        BinarySearchTree<Integer> tree = new BinarySearchTree<>();
        tree.add(30);
        tree.add(70);
        tree.add(80);

        tree.add(50);

        tree.add(53);
        assertEquals("BinaryTreeClass{root=BinaryNode{data=30, leftNode=null, rightNode=BinaryNode{data=70, leftNode=BinaryNode{data=50, leftNode=null, rightNode=BinaryNode{data=53, leftNode=null, rightNode=null}}, rightNode=BinaryNode{data=80, leftNode=null, rightNode=null}}}}", tree.toString());

    }


    @Test
    void getMaxTest() throws Exception {
        BinarySearchTree<Integer> tree2 = new BinarySearchTree<>();

        tree2.add(75);
        tree2.add(190);

        tree2.add(51);
        tree2.add(100);

        tree2.add(53);
        tree2.add(53);
        tree2.add(150);
        tree2.add(5);
        tree2.add(0);

        assertEquals(190,tree2.maximumValue());

    }

    @Test
    void oddNumbersTest() throws Exception {
        BinarySearchTree<Integer> tree2 = new BinarySearchTree<>();

        tree2.add(2);
        tree2.add(3);
        tree2.add(5);
        tree2.add(10);
        tree2.add(1);
        tree2.add(7);
        tree2.add(11);

        assertEquals(27,tree2.sumOfOddNumbers());

    }
}